{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dev-adf-47"
		},
		"ln_devaccount47_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://devaccount47.dfs.core.windows.net/"
		},
		"ln_devaccount47_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "de5bd167-c2de-4467-adbe-5c907f146c74"
		},
		"ln_devaccount47_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "88c95259-7e7b-4f70-a2e4-d0d0a826e744"
		},
		"ln_sqldb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "devsqlserver47.database.windows.net"
		},
		"ln_sqldb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dev-db"
		},
		"ln_sqldb_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "88c95259-7e7b-4f70-a2e4-d0d0a826e744"
		},
		"ln_sqldb_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "de5bd167-c2de-4467-adbe-5c907f146c74"
		},
		"ls_compute_databricks_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0810-100306-69fm3yke"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_devaccount47",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Covid/raw"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "hospital_admissions.csv",
						"folderPath": "ecdc/hospital_admissions",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "indicator",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "year_week",
						"type": "String"
					},
					{
						"name": "value",
						"type": "String"
					},
					{
						"name": "source",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ln_devaccount47')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ln_devaccount47_properties_typeProperties_url')]",
					"tenant": "[parameters('ln_devaccount47_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('ln_devaccount47_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ln_dev_akv_47",
							"type": "LinkedServiceReference"
						},
						"secretName": "dev-etl-sp-secret"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ln_sqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ln_sqldb_properties_typeProperties_server')]",
					"database": "[parameters('ln_sqldb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "ServicePrincipal",
					"servicePrincipalId": "[parameters('ln_sqldb_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ln_dev_akv_47",
							"type": "LinkedServiceReference"
						},
						"secretName": "dev-etl-sp-secret"
					},
					"tenant": "[parameters('ln_sqldb_properties_typeProperties_tenant')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_compute_databricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4057062643285486.6.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ln_dev_akv_47",
							"type": "LinkedServiceReference"
						},
						"secretName": "databricks-ws"
					},
					"existingClusterId": "[parameters('ls_compute_databricks_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_dynamic_compute_databricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4057062643285486.6.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ln_dev_akv_47",
							"type": "LinkedServiceReference"
						},
						"secretName": "databricks-ws"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "14.3.x-scala2.12",
					"clusterOption": "Fixed",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_cases_deaths_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_ecdc_data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_http_ecdc_github_csv_generic",
								"type": "DatasetReference",
								"parameters": {
									"p_filename": {
										"value": "@pipeline().parameters.p_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_devaccount47_txt_generic",
								"type": "DatasetReference",
								"parameters": {
									"p_container": "raw",
									"p_folder": "ecdc",
									"p_filename": {
										"value": "@pipeline().parameters.p_filename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_filename": {
						"type": "string",
						"defaultValue": "cases_deaths.csv"
					}
				},
				"folder": {
					"name": "Covid/extract"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_ecdc_github_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_ecdc_data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_http_ecdc_github_csv_generic",
								"type": "DatasetReference",
								"parameters": {
									"p_filename": {
										"value": "@pipeline().parameters.p_sourcename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_devaccount47_txt_generic",
								"type": "DatasetReference",
								"parameters": {
									"p_container": "raw",
									"p_folder": "ecdc",
									"p_filename": {
										"value": "@pipeline().parameters.p_filename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_filename": {
						"type": "string"
					},
					"p_sourcename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Covid/extract"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_population_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "check_if_file_exists",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_population_raw_gz",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:03:00",
							"sleep": 10,
							"minimumSize": 1024
						}
					},
					{
						"name": "get_file_metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "check_if_file_exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_population_raw_gz",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"structure",
								"contentMD5",
								"exists",
								"itemName",
								"itemType",
								"lastModified",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "if_column_count_matches",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "get_file_metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('get_file_metadata').output.columnCount, 13)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "notify_error",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "File does not have expected number of columns (14) [This is fake, true expected is 13]",
										"errorCode": "50006"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy population data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_population_raw_gz",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_population_raw_tsv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Move raw population data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy population data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": "population",
												"Directory": {
													"value": "@string('')",
													"type": "Expression"
												},
												"filename": "population_by_age.tsv.gz"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDataDestination",
											"type": "DatasetReference",
											"parameters": {
												"Container": "raw",
												"Directory": "population/archive",
												"filename": {
													"value": "@concat('population_by_age__',formatDateTime(utcNow(), 'yyyy-MM-dd-HH-mm'),'.tsv.gz')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "alternatively-just_delete",
									"type": "Delete",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Move raw population data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_population_raw_gz",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Covid/extract"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_population')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "transform_population_data",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/covid/transform/transform_population_data"
						},
						"linkedServiceName": {
							"referenceName": "ls_compute_databricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Covid/transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_compute_databricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_generic_adls_text_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ln_devaccount47",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_foldername": {
						"type": "string"
					},
					"p_filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "_FRAMEWORK"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_foldername",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ln_devaccount47')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_generic_azure_sqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ln_sqldb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "_FRAMEWORK"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ln_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_generic_par_azure_sqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ln_sqldb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_schema": {
						"type": "string"
					},
					"p_table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "_FRAMEWORK"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().p_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().p_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ln_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_cases_deaths')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_cases_and_deaths",
								"type": "DatasetReference"
							},
							"name": "SourceCasesAndDeaths"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "SourceCountryLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_curated_cases_deaths",
								"type": "DatasetReference"
							},
							"name": "CasesDeathsSink"
						}
					],
					"transformations": [
						{
							"name": "FilterEuropeOnly"
						},
						{
							"name": "SelectAndRenameRelevantColumns"
						},
						{
							"name": "PivotTheIndicatedCounts"
						},
						{
							"name": "NewIndicatorColumn"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectRelevantColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as integer,",
						"          date as date,",
						"          rate_14_day as double,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('roundRobin', 4)) ~> SourceCasesAndDeaths",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCountryLookup",
						"SourceCasesAndDeaths filter(continent == 'Europe' && not(isNull(country_code))) ~> FilterEuropeOnly",
						"NewIndicatorColumn select(mapColumn(",
						"          country,",
						"          country_code,",
						"          population,",
						"          indicator = new_indicator,",
						"          daily_count,",
						"          source,",
						"          each(match(name=='date'),",
						"               'reported_date' = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAndRenameRelevantColumns",
						"SelectAndRenameRelevantColumns pivot(groupBy(country,",
						"          country_code,",
						"          population,",
						"          source,",
						"          reported_date),",
						"     pivotBy(indicator, ['cases', 'deaths']),",
						"     count = sum(daily_count),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivotTheIndicatedCounts",
						"FilterEuropeOnly derive(new_indicator = case(indicator=='confirmed cases', 'cases', 'deaths')) ~> NewIndicatorColumn",
						"PivotTheIndicatedCounts, SourceCountryLookup lookup(country_code == country_code_3_digit,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCountry",
						"LookupCountry select(mapColumn(",
						"          country = PivotTheIndicatedCounts@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population = PivotTheIndicatedCounts@population,",
						"          cases_count,",
						"          deaths_count,",
						"          source,",
						"          reported_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRelevantColumns",
						"SelectRelevantColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          population as string,",
						"          cases_count as string,",
						"          deaths_count as string,",
						"          source as string,",
						"          reported_date as string",
						"     ),",
						"     truncate: true,",
						"     umask: 0220,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('roundRobin', 4)) ~> CasesDeathsSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_hospital_admissions",
								"type": "DatasetReference"
							},
							"name": "SourceHospitalAdmissions"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "SourceCountryLookup"
						},
						{
							"dataset": {
								"referenceName": "ds_dimdate_lookup",
								"type": "DatasetReference"
							},
							"name": "SourceDimDate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_curated_daily_hospital_admissions",
								"type": "DatasetReference"
							},
							"name": "SinkDaily"
						},
						{
							"dataset": {
								"referenceName": "ds_curated_weekly_hospital_admissions",
								"type": "DatasetReference"
							},
							"name": "SinkWeekly"
						}
					],
					"transformations": [
						{
							"name": "SelectAndRenameColumns"
						},
						{
							"name": "LookupCountryCode"
						},
						{
							"name": "SelectRelevantColumns"
						},
						{
							"name": "SplitDailyWeekly"
						},
						{
							"name": "AggDimDate"
						},
						{
							"name": "JoinWithDate"
						},
						{
							"name": "PivotIndicatorWeekly"
						},
						{
							"name": "SelectFromPivotWeekly"
						},
						{
							"name": "PivotIndicatorDaily"
						},
						{
							"name": "SelectFromPivotDaily"
						},
						{
							"name": "SortWeekly"
						},
						{
							"name": "SortDaily"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceHospitalAdmissions",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCountryLookup",
						"source(output(",
						"          date_key as date,",
						"          date as date,",
						"          year as short,",
						"          month as short,",
						"          day as short,",
						"          day_name as string,",
						"          day_of_year as short,",
						"          week_of_month as short,",
						"          week_of_year as short,",
						"          month_name as string,",
						"          year_month as integer,",
						"          year_week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceDimDate",
						"SourceHospitalAdmissions select(mapColumn(",
						"          country,",
						"          indicator,",
						"          reported_date = date,",
						"          reported_year_week = year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAndRenameColumns",
						"SelectAndRenameColumns, SourceCountryLookup lookup(SelectAndRenameColumns@country == SourceCountryLookup@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCountryCode",
						"LookupCountryCode select(mapColumn(",
						"          country = SelectAndRenameColumns@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          indicator,",
						"          reported_date,",
						"          reported_year_week,",
						"          value,",
						"          source,",
						"          population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRelevantColumns",
						"SelectRelevantColumns split(startsWith(indicator, 'Daily'),",
						"     disjoint: false) ~> SplitDailyWeekly@(DailyData, WeeklyData)",
						"SourceDimDate aggregate(groupBy(ecdc_year_week = toString(year)+'-W'+lpad(toString(week_of_year),2,'0')),",
						"     week_start_date = min(date),",
						"          week_end_date = max(date)) ~> AggDimDate",
						"SplitDailyWeekly@WeeklyData, AggDimDate join(reported_year_week == ecdc_year_week,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWithDate",
						"JoinWithDate pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          source,",
						"          week_start_date,",
						"          week_end_date),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
						"     {} = sum(value),",
						"     columnNaming: 'new_$N$V_count',",
						"     lateral: true) ~> PivotIndicatorWeekly",
						"PivotIndicatorWeekly select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          source,",
						"          reported_week_start_date = week_start_date,",
						"          reported_week_end_date = week_end_date,",
						"          new_hospital_occupancy_count = {new_Weekly new hospital admissions per 100k_count},",
						"          new_icu_occupancy_count = {new_Weekly new ICU admissions per 100k_count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFromPivotWeekly",
						"SplitDailyWeekly@DailyData pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          reported_date,",
						"          population,",
						"          source),",
						"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
						"     {} = sum(value),",
						"     columnNaming: 'new_$N$V_count',",
						"     lateral: true) ~> PivotIndicatorDaily",
						"PivotIndicatorDaily select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          reported_date,",
						"          population,",
						"          source,",
						"          hospital_occupancy_count = {new_Daily hospital occupancy_count},",
						"          icu_occupancy_count = {new_Daily ICU occupancy_count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFromPivotDaily",
						"SelectFromPivotWeekly sort(desc(reported_year_week, true),",
						"     asc(country, true)) ~> SortWeekly",
						"SelectFromPivotDaily sort(desc(reported_date, true),",
						"     asc(country, true)) ~> SortDaily",
						"SortDaily sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkDaily",
						"SortWeekly sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkWeekly"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_hospital_admissions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_test_sp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[uspPrintError]"
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ln_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_check_task_status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_env_parameters",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM\n(\n\tSELECT parameter, value\n\tFROM config.environment\n) AS base\nPIVOT\n(\n\tMAX(value) FOR parameter IN (subscription, rg, adf)\n) AS pivoted",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "await_task_completion",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "get_env_parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(or(equals(variables('v_task_status'), 'InProgress'), equals(variables('v_task_status'), 'Queued')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "check_task_status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "pause",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {},
										"url": {
											"value": "@concat(\n    'https://management.azure.com/subscriptions/',\n    activity('get_env_parameters').output.firstRow.subscription,\n    '/resourceGroups/', \n    activity('get_env_parameters').output.firstRow.rg,\n    '/providers/Microsoft.DataFactory/factories/',\n    activity('get_env_parameters').output.firstRow.adf, \n    '/pipelineruns/', pipeline().parameters.p_run_id, \n    '?api-version=2018-06-01'\n )",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.azure.com/"
										}
									}
								},
								{
									"name": "set_task_status",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "check_task_status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_task_status",
										"value": {
											"value": "@activity('check_task_status').output.status",
											"type": "Expression"
										}
									}
								},
								{
									"name": "task_failed",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "check_task_status",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": "Check status failed.",
										"errorCode": "50005"
									}
								},
								{
									"name": "pause",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_run_id": {
						"type": "string"
					},
					"p_job": {
						"type": "string"
					}
				},
				"variables": {
					"v_task_status": {
						"type": "String"
					}
				},
				"folder": {
					"name": "_FRAMEWORK"
				},
				"annotations": [
					"@pipeline().parameters.p_job"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_generic_azure_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_extract_from_sqldb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "extract_from_sqldb",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get_task_parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(activity('get_task_parameters').output.firstRow.src_sql, ' WHERE ModifiedDate > ''',activity('get_last_run_date').output.firstRow.last_run_date, '''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_adls_text_file",
								"type": "DatasetReference",
								"parameters": {
									"p_foldername": {
										"value": "@activity('get_task_parameters').output.firstRow.tgt_folder",
										"type": "Expression"
									},
									"p_filename": {
										"value": "@activity('get_task_parameters').output.firstRow.tgt_filename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "get_task_parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "get_last_run_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[control].[sp_task_parameters]",
								"storedProcedureParameters": {
									"job": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.p_job",
											"type": "Expression"
										}
									},
									"job_id": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.p_job_id",
											"type": "Expression"
										}
									},
									"task": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"task_id": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"task_sequence": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.p_task_sequence",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "log_start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_job_task_log]",
							"storedProcedureParameters": {
								"job": {
									"value": {
										"value": "@pipeline().parameters.p_job",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_id": {
									"value": {
										"value": "@pipeline().parameters.p_job_id",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_status": {
									"value": null,
									"type": "String"
								},
								"status_description": {
									"value": {
										"value": "@concat('Started running: ', pipeline().Pipeline)",
										"type": "Expression"
									},
									"type": "String"
								},
								"task": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_sequence": {
									"value": {
										"value": "@pipeline().parameters.p_task_sequence",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"task_status": {
									"value": "RUNNING",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "log_success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "update_last_run_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_job_task_log]",
							"storedProcedureParameters": {
								"job": {
									"value": {
										"value": "@pipeline().parameters.p_job",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_id": {
									"value": {
										"value": "@pipeline().parameters.p_job_id",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_status": {
									"value": null,
									"type": "String"
								},
								"status_description": {
									"value": {
										"value": "@concat('Succeeded running: ', pipeline().Pipeline)",
										"type": "Expression"
									},
									"type": "String"
								},
								"task": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_sequence": {
									"value": {
										"value": "@pipeline().parameters.p_task_sequence",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"task_status": {
									"value": "SUCCESS",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "log_failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "update_control_table_failure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_job_task_log]",
							"storedProcedureParameters": {
								"job": {
									"value": {
										"value": "@pipeline().parameters.p_job",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_id": {
									"value": {
										"value": "@pipeline().parameters.p_job_id",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_status": {
									"value": null,
									"type": "String"
								},
								"status_description": {
									"value": {
										"value": "@concat('Failed running: ', pipeline().Pipeline)",
										"type": "Expression"
									},
									"type": "String"
								},
								"task": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_sequence": {
									"value": {
										"value": "@pipeline().parameters.p_task_sequence",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"task_status": {
									"value": "ERROR",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "update_control_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "log_start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_update_job_control]",
							"storedProcedureParameters": {
								"job": {
									"value": {
										"value": "@pipeline().parameters.p_job",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_id": {
									"value": {
										"value": "@pipeline().parameters.p_job_id",
										"type": "Expression"
									},
									"type": "String"
								},
								"task": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_status": {
									"value": "RUNNING",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "update_control_table_success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "extract_from_sqldb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_update_job_control]",
							"storedProcedureParameters": {
								"job": {
									"value": {
										"value": "@pipeline().parameters.p_job",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_id": {
									"value": {
										"value": "@pipeline().parameters.p_job_id",
										"type": "Expression"
									},
									"type": "String"
								},
								"task": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_status": {
									"value": "SUCCESS",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "update_control_table_failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "extract_from_sqldb",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_update_job_control]",
							"storedProcedureParameters": {
								"job": {
									"value": {
										"value": "@pipeline().parameters.p_job",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_id": {
									"value": {
										"value": "@pipeline().parameters.p_job_id",
										"type": "Expression"
									},
									"type": "String"
								},
								"task": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_status": {
									"value": "ERROR",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "get_last_run_date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "update_control_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[control].[sp_get_last_run_date]",
								"storedProcedureParameters": {
									"job": {
										"type": "String",
										"value": "load_customer"
									},
									"task": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "update_last_run_date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "update_control_table_success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_update_last_run_date]",
							"storedProcedureParameters": {
								"job": {
									"value": {
										"value": "@pipeline().parameters.p_job",
										"type": "Expression"
									},
									"type": "String"
								},
								"last_run_date": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"task": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_job": {
						"type": "string"
					},
					"p_job_id": {
						"type": "string"
					},
					"p_task_sequence": {
						"type": "string"
					}
				},
				"folder": {
					"name": "_FRAMEWORK"
				},
				"annotations": [
					"@pipeline().parameters.p_job"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_generic_azure_sqldb')]",
				"[concat(variables('factoryId'), '/datasets/ds_generic_adls_text_file')]",
				"[concat(variables('factoryId'), '/linkedServices/ln_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_extract_from_sqldb_1_not_transposed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Reaching for multiple records concerning parameters, meaning we have many rows, each for a parameter and it's value. Hard to pick a value. Unreliable.",
				"activities": [
					{
						"name": "extract_from_sqldb",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "lookup_test_multiple_records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM SalesLT.Customer",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_adls_text_file",
								"type": "DatasetReference",
								"parameters": {
									"p_foldername": "customer",
									"p_filename": "customer.csv"
								}
							}
						]
					},
					{
						"name": "lookup_test_multiple_records",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT jtp.job, jtp.task, jtp.task_sequence, jtp.parameter, jtp.value\nFROM\n\tconfig.job_task_parameters jtp\n\tJOIN\n\tconfig.task_parameters tp\n\tON\n\t\tjtp.task = tp.task\n\t\tAND jtp.parameter = tp.parameter\n\t\tAND jtp.active = 'Y'\n\t\tAND tp.active = 'Y'\n\t\tAND tp.parameter_type = 'static'\nWHERE jtp.job = 'load_customer'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "_FRAMEWORK/Buildup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_generic_azure_sqldb')]",
				"[concat(variables('factoryId'), '/datasets/ds_generic_adls_text_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_extract_from_sqldb_2_hardcoded_transpose')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Transposed values. Now very easy to pick a specific parameter's value but on the other hand HARD CODED. New pipeline = modification to hardcode. New parameter = modification to hardcode. Etc...",
				"activities": [
					{
						"name": "extract_from_sqldb",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get_task_parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@activity('get_task_parameters').output.firstRow.src_sql",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_adls_text_file",
								"type": "DatasetReference",
								"parameters": {
									"p_foldername": {
										"value": "@activity('get_task_parameters').output.firstRow.tgt_folder",
										"type": "Expression"
									},
									"p_filename": {
										"value": "@activity('get_task_parameters').output.firstRow.tgt_filename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "get_task_parameters",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM (\nSELECT jtp.job, jtp.task, jtp.task_sequence, jtp.parameter, jtp.value\nFROM\n\tconfig.job_task_parameters jtp\n\tJOIN\n\tconfig.task_parameters tp\n\tON\n\t\tjtp.task = tp.task\n\t\tAND jtp.parameter = tp.parameter\n\t\tAND jtp.active = 'Y'\n\t\tAND tp.active = 'Y'\n\t\tAND tp.parameter_type = 'static'\nWHERE jtp.job = 'load_customer'\n\tAND jtp.task = 'PL_extract_from_sqldb'\n) AS n\nPIVOT\n(\n\tMAX(value) FOR parameter IN (src_sql, tgt_folder, tgt_filename)\n) AS p",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "_FRAMEWORK/Buildup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_generic_azure_sqldb')]",
				"[concat(variables('factoryId'), '/datasets/ds_generic_adls_text_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_extract_from_sqldb_3_4_with_dynamic_SP_and_logging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Now a dynamic Stored Procedures picks proper params per job and task in a good format.\nAlso simple logging is being added. Note that job_id and task_id are the same for now - that is because job_id should be a parent pipeline id which ochestrates several tasks as a one job.",
				"activities": [
					{
						"name": "extract_from_sqldb",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get_task_parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@activity('get_task_parameters').output.firstRow.src_sql",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_adls_text_file",
								"type": "DatasetReference",
								"parameters": {
									"p_foldername": {
										"value": "@activity('get_task_parameters').output.firstRow.tgt_folder",
										"type": "Expression"
									},
									"p_filename": {
										"value": "@activity('get_task_parameters').output.firstRow.tgt_filename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "get_task_parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "log_start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[control].[sp_task_parameters]",
								"storedProcedureParameters": {
									"job": {
										"type": "String",
										"value": "load_customer"
									},
									"job_id": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"task": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"task_id": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"task_sequence": {
										"type": "Int32",
										"value": "1"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "log_start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_job_task_log]",
							"storedProcedureParameters": {
								"job": {
									"value": "load_customer",
									"type": "String"
								},
								"job_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_status": {
									"value": null,
									"type": "String"
								},
								"status_description": {
									"value": "Started running: PL_extract_from_sqldb",
									"type": "String"
								},
								"task": {
									"value": "PL_extract_from_sqldb",
									"type": "String"
								},
								"task_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_sequence": {
									"value": "1",
									"type": "Int32"
								},
								"task_status": {
									"value": "Running",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "log_success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "extract_from_sqldb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_job_task_log]",
							"storedProcedureParameters": {
								"job": {
									"value": "load_customer",
									"type": "String"
								},
								"job_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_status": {
									"value": null,
									"type": "String"
								},
								"status_description": {
									"value": "Succeeded running: PL_extract_from_sqldb",
									"type": "String"
								},
								"task": {
									"value": "PL_extract_from_sqldb",
									"type": "String"
								},
								"task_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_sequence": {
									"value": "1",
									"type": "Int32"
								},
								"task_status": {
									"value": "Success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "log_failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "extract_from_sqldb",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_job_task_log]",
							"storedProcedureParameters": {
								"job": {
									"value": "load_customer",
									"type": "String"
								},
								"job_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_status": {
									"value": null,
									"type": "String"
								},
								"status_description": {
									"value": "Failed running: PL_extract_from_sqldb",
									"type": "String"
								},
								"task": {
									"value": "PL_extract_from_sqldb",
									"type": "String"
								},
								"task_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"task_sequence": {
									"value": "1",
									"type": "Int32"
								},
								"task_status": {
									"value": "Failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ln_sqldb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "_FRAMEWORK/Buildup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_generic_azure_sqldb')]",
				"[concat(variables('factoryId'), '/datasets/ds_generic_adls_text_file')]",
				"[concat(variables('factoryId'), '/linkedServices/ln_sqldb')]"
			]
		}
	]
}