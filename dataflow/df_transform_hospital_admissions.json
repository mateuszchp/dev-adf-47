{
	"name": "df_transform_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "SourceHospitalAdmissions"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "SourceCountryLookup"
				},
				{
					"dataset": {
						"referenceName": "ds_dimdate_lookup",
						"type": "DatasetReference"
					},
					"name": "SourceDimDate"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "SelectAndRenameColumns"
				},
				{
					"name": "LookupCountryCode"
				},
				{
					"name": "SelectRelevantColumns"
				},
				{
					"name": "SplitDailyWeekly"
				},
				{
					"name": "AggDimDate"
				},
				{
					"name": "JoinWithDate"
				},
				{
					"name": "PivotIndicatorWeekly"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceHospitalAdmissions",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceCountryLookup",
				"source(output(",
				"          date_key as date,",
				"          date as date,",
				"          year as short,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as short,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceDimDate",
				"SourceHospitalAdmissions select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAndRenameColumns",
				"SelectAndRenameColumns, SourceCountryLookup lookup(SelectAndRenameColumns@country == SourceCountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountryCode",
				"LookupCountryCode select(mapColumn(",
				"          country = SelectAndRenameColumns@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRelevantColumns",
				"SelectRelevantColumns split(startsWith(indicator, 'Daily'),",
				"     disjoint: false) ~> SplitDailyWeekly@(DailyData, WeeklyData)",
				"SourceDimDate aggregate(groupBy(ecdc_year_week = toString(year) + '-W' + lpad(toString(week_of_year), 2, '0')),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggDimDate",
				"SplitDailyWeekly@WeeklyData, AggDimDate join(reported_year_week == ecdc_year_week,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithDate",
				"JoinWithDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          population,",
				"          ecdc_year_week,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     {} = sum(value),",
				"     columnNaming: 'new_$N$V_count',",
				"     lateral: true) ~> PivotIndicatorWeekly",
				"PivotIndicatorWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          population,",
				"          ecdc_year_week,",
				"          week_start_date,",
				"          week_end_date,",
				"          new_hospital_occupancy_count = {new_Weekly new hospital admissions per 100k_count},",
				"          new_icu_occupancy_count = {new_Weekly new ICU admissions per 100k_count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1"
			]
		}
	}
}